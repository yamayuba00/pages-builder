
import React, { useState } from 'react';
import { ResizableHandle, ResizablePanel, ResizablePanelGroup } from "@/components/ui/resizable";
import ComponentPalette from './ComponentPalette';
import PageCanvas from './PageCanvas';
import ComponentEditor from './ComponentEditor';
import { PageComponent, ComponentType } from '@/lib/page-builder-types';
import { pageComponents } from '@/lib/page-components';
import { PanelLeftClose, PanelLeftOpen, Download } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { useToast } from '@/hooks/use-toast';

const PageBuilder: React.FC = () => {
  const [components, setComponents] = useState<PageComponent[]>([]);
  const [selectedComponentId, setSelectedComponentId] = useState<string | null>(null);
  const [isLeftPanelCollapsed, setIsLeftPanelCollapsed] = useState(false);
  const { toast } = useToast();

  const handleAddComponent = (type: ComponentType) => {
    const config = pageComponents[type];
    if (!config) return;

    const newComponent: PageComponent = {
      id: `${type}-${Date.now()}`,
      type,
      props: { ...config.defaultProps },
      order: components.length,
    };

    setComponents(prev => [...prev, newComponent]);
    setSelectedComponentId(newComponent.id);
    
    toast({
      title: "Komponen ditambahkan!",
      description: `${config.name} berhasil ditambahkan ke halaman.`,
    });
  };

  const handleSelectComponent = (id: string) => {
    setSelectedComponentId(id);
  };

  const handleDeleteComponent = (id: string) => {
    setComponents(prev => prev.filter(comp => comp.id !== id));
    if (selectedComponentId === id) {
      setSelectedComponentId(null);
    }
    
    toast({
      title: "Komponen dihapus!",
      description: "Komponen berhasil dihapus dari halaman.",
    });
  };

  const handleMoveComponent = (id: string, direction: 'up' | 'down') => {
    setComponents(prev => {
      const component = prev.find(c => c.id === id);
      if (!component) return prev;

      const newOrder = direction === 'up' ? component.order - 1.5 : component.order + 1.5;
      const updated = prev.map(c => 
        c.id === id ? { ...c, order: newOrder } : c
      );

      // Reorder all components
      return updated
        .sort((a, b) => a.order - b.order)
        .map((c, index) => ({ ...c, order: index }));
    });
  };

  const handlePropChange = (componentId: string, key: string, value: any) => {
    setComponents(prev => 
      prev.map(comp => 
        comp.id === componentId 
          ? { ...comp, props: { ...comp.props, [key]: value } }
          : comp
      )
    );
  };

  const selectedComponent = components.find(c => c.id === selectedComponentId) || null;

  const handleExportHTML = () => {
    // Simple HTML export functionality
    const html = `
<!DOCTYPE html>
<html lang="id">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Landing Page</title>
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body>
    <!-- Generated by Page Builder -->
    ${components.map(comp => `<!-- ${pageComponents[comp.type]?.name || comp.type} -->`).join('\n    ')}
</body>
</html>`;

    const blob = new Blob([html], { type: 'text/html' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'landing-page.html';
    a.click();
    URL.revokeObjectURL(url);

    toast({
      title: "HTML diekspor!",
      description: "File HTML berhasil didownload.",
    });
  };

  return (
    <div className="h-screen w-screen bg-background text-foreground flex flex-col">
      <header className="flex h-14 items-center gap-4 border-b bg-secondary/50 px-6">
        <h1 className="text-lg font-semibold">Page Builder Pro</h1>
        <div className="ml-auto flex gap-2">
          <Button variant="outline" size="sm" onClick={handleExportHTML}>
            <Download className="h-4 w-4 mr-2" />
            Export HTML
          </Button>
        </div>
      </header>
      <div className="flex-grow">
        <ResizablePanelGroup direction="horizontal" className="h-full w-full">
          <ResizablePanel 
            defaultSize={20} 
            minSize={15} 
            maxSize={30}
            collapsible
            collapsedSize={0}
            onCollapse={() => setIsLeftPanelCollapsed(true)}
            onExpand={() => setIsLeftPanelCollapsed(false)}
            className={`transition-all duration-300 ${isLeftPanelCollapsed ? 'hidden' : 'block'}`}
          >
            <ComponentPalette onAddComponent={handleAddComponent} />
          </ResizablePanel>
          {!isLeftPanelCollapsed && <ResizableHandle withHandle />}
          <ResizablePanel defaultSize={60} minSize={30}>
            <div className="relative h-full">
              {isLeftPanelCollapsed && (
                <Button 
                  variant="ghost" 
                  size="icon" 
                  className="absolute top-2 left-2 z-10"
                  onClick={() => setIsLeftPanelCollapsed(false)}
                >
                  <PanelLeftOpen className="h-5 w-5" />
                </Button>
              )}
              <PageCanvas
                components={components}
                selectedComponentId={selectedComponentId}
                onSelectComponent={handleSelectComponent}
                onDeleteComponent={handleDeleteComponent}
                onMoveComponent={handleMoveComponent}
              />
            </div>
          </ResizablePanel>
          <ResizableHandle withHandle />
          <ResizablePanel defaultSize={20} minSize={15} maxSize={30}>
            <ComponentEditor
              component={selectedComponent}
              onPropChange={handlePropChange}
            />
          </ResizablePanel>
        </ResizablePanelGroup>
      </div>
    </div>
  );
};

export default PageBuilder;
